"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/rates/compose.ts":
/*!**********************************!*\
  !*** ./src/lib/rates/compose.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   composeRates: function() { return /* binding */ composeRates; },\n/* harmony export */   computeCrossRate: function() { return /* binding */ computeCrossRate; },\n/* harmony export */   convert: function() { return /* binding */ convert; },\n/* harmony export */   createRateKey: function() { return /* binding */ createRateKey; },\n/* harmony export */   getInverseRate: function() { return /* binding */ getInverseRate; },\n/* harmony export */   roundToSignificantDigits: function() { return /* binding */ roundToSignificantDigits; }\n/* harmony export */ });\n/* harmony import */ var _providers_bcv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./providers/bcv */ \"(app-pages-browser)/./src/lib/rates/providers/bcv.ts\");\n/* harmony import */ var _providers_frankfurter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./providers/frankfurter */ \"(app-pages-browser)/./src/lib/rates/providers/frankfurter.ts\");\n/* harmony import */ var _providers_publicFx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./providers/publicFx */ \"(app-pages-browser)/./src/lib/rates/providers/publicFx.ts\");\n\n\n\nfunction createRateKey(base, quote) {\n    return \"\".concat(base, \"-\").concat(quote);\n}\nfunction getInverseRate(rate) {\n    return {\n        base: rate.quote,\n        quote: rate.base,\n        value: 1 / rate.value,\n        provider: rate.provider,\n        at: rate.at\n    };\n}\nfunction roundToSignificantDigits(value) {\n    let digits = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;\n    if (value === 0) return 0;\n    const magnitude = Math.floor(Math.log10(Math.abs(value)));\n    const factor = Math.pow(10, digits - 1 - magnitude);\n    return Math.round(value * factor) / factor;\n}\nfunction computeCrossRate(rate1, rate2, targetBase, targetQuote) {\n    // Check if we can compute the cross rate\n    if (rate1.quote !== rate2.base) {\n        return null;\n    }\n    const crossValue = rate1.value * rate2.value;\n    const roundedValue = roundToSignificantDigits(crossValue);\n    return {\n        base: targetBase,\n        quote: targetQuote,\n        value: roundedValue,\n        provider: \"\".concat(rate1.provider, \"+\").concat(rate2.provider),\n        at: new Date().toISOString()\n    };\n}\nasync function composeRates() {\n    const allRates = {};\n    const providerNotes = [];\n    // Fetch from all providers in parallel\n    const [bcvResult, frankfurterResult, publicFxResult] = await Promise.allSettled([\n        (0,_providers_bcv__WEBPACK_IMPORTED_MODULE_0__.getBCVRates)(),\n        (0,_providers_frankfurter__WEBPACK_IMPORTED_MODULE_1__.getFrankfurterRates)(),\n        (0,_providers_publicFx__WEBPACK_IMPORTED_MODULE_2__.getPublicFxRates)()\n    ]);\n    // Process BCV results\n    if (bcvResult.status === \"fulfilled\" && bcvResult.value.success) {\n        Object.assign(allRates, bcvResult.value.rates);\n        providerNotes.push(\"BCV: \".concat(Object.keys(bcvResult.value.rates).length, \" rates\"));\n    } else {\n        var _bcvResult_reason, _bcvResult_value;\n        const error = bcvResult.status === \"rejected\" ? (_bcvResult_reason = bcvResult.reason) === null || _bcvResult_reason === void 0 ? void 0 : _bcvResult_reason.message : (_bcvResult_value = bcvResult.value) === null || _bcvResult_value === void 0 ? void 0 : _bcvResult_value.error;\n        providerNotes.push(\"BCV: Failed (\".concat(error, \")\"));\n    }\n    // Process Frankfurter results\n    if (frankfurterResult.status === \"fulfilled\" && frankfurterResult.value.success) {\n        Object.assign(allRates, frankfurterResult.value.rates);\n        providerNotes.push(\"Frankfurter: \".concat(Object.keys(frankfurterResult.value.rates).length, \" rates\"));\n    } else {\n        var _frankfurterResult_reason, _frankfurterResult_value;\n        const error = frankfurterResult.status === \"rejected\" ? (_frankfurterResult_reason = frankfurterResult.reason) === null || _frankfurterResult_reason === void 0 ? void 0 : _frankfurterResult_reason.message : (_frankfurterResult_value = frankfurterResult.value) === null || _frankfurterResult_value === void 0 ? void 0 : _frankfurterResult_value.error;\n        providerNotes.push(\"Frankfurter: Failed (\".concat(error, \")\"));\n    }\n    // Process Public FX results\n    if (publicFxResult.status === \"fulfilled\" && publicFxResult.value.success) {\n        Object.assign(allRates, publicFxResult.value.rates);\n        providerNotes.push(\"PublicFX: \".concat(Object.keys(publicFxResult.value.rates).length, \" rates\"));\n    } else {\n        var _publicFxResult_reason, _publicFxResult_value;\n        const error = publicFxResult.status === \"rejected\" ? (_publicFxResult_reason = publicFxResult.reason) === null || _publicFxResult_reason === void 0 ? void 0 : _publicFxResult_reason.message : (_publicFxResult_value = publicFxResult.value) === null || _publicFxResult_value === void 0 ? void 0 : _publicFxResult_value.error;\n        providerNotes.push(\"PublicFX: Failed (\".concat(error, \")\"));\n    }\n    // Add inverse rates for all direct rates\n    const directRates = {\n        ...allRates\n    };\n    for (const [key, rate] of Object.entries(directRates)){\n        const inverseKey = createRateKey(rate.quote, rate.base);\n        if (!allRates[inverseKey]) {\n            allRates[inverseKey] = getInverseRate(rate);\n        }\n    }\n    // Add fallback rates if we have very few rates\n    if (Object.keys(allRates).length < 4) {\n        providerNotes.push(\"Using fallback rates due to limited data\");\n        // Add some reasonable fallback rates for testing\n        if (!allRates[\"USD-VES\"]) {\n            allRates[\"USD-VES\"] = {\n                base: \"USD\",\n                quote: \"VES\",\n                value: 195.0,\n                provider: \"Fallback\",\n                at: new Date().toISOString()\n            };\n            allRates[\"VES-USD\"] = getInverseRate(allRates[\"USD-VES\"]);\n        }\n        if (!allRates[\"USD-COP\"]) {\n            allRates[\"USD-COP\"] = {\n                base: \"USD\",\n                quote: \"COP\",\n                value: 4100,\n                provider: \"Fallback\",\n                at: new Date().toISOString()\n            };\n            allRates[\"COP-USD\"] = getInverseRate(allRates[\"USD-COP\"]);\n        }\n    }\n    // Compute cross rates for missing pairs\n    const requiredPairs = [\n        \"COP-VES\",\n        \"VES-COP\"\n    ];\n    for (const pair of requiredPairs){\n        if (!allRates[pair]) {\n            const [base, quote] = pair.split(\"-\");\n            // Try COP-VES via COP-USD and USD-VES\n            if (base === \"COP\" && quote === \"VES\") {\n                const copUsd = allRates[\"COP-USD\"];\n                const usdVes = allRates[\"USD-VES\"];\n                if (copUsd && usdVes) {\n                    const crossRate = computeCrossRate(copUsd, usdVes, \"COP\", \"VES\");\n                    if (crossRate) {\n                        allRates[\"COP-VES\"] = crossRate;\n                        allRates[\"VES-COP\"] = getInverseRate(crossRate);\n                        providerNotes.push(\"COP-VES: Computed via COP-USD \\xd7 USD-VES\");\n                    }\n                }\n            }\n        }\n    }\n    return allRates;\n}\nfunction convert(amount, from, to, rates) {\n    if (from === to) return amount;\n    const directKey = createRateKey(from, to);\n    const directRate = rates[directKey];\n    if (directRate) {\n        return roundToSignificantDigits(amount * directRate.value, 8);\n    }\n    // Try cross conversion via USD (most reliable base currency)\n    const fromUsdKey = createRateKey(from, \"USD\");\n    const usdToKey = createRateKey(\"USD\", to);\n    if (rates[fromUsdKey] && rates[usdToKey]) {\n        const viaUsd = amount * rates[fromUsdKey].value * rates[usdToKey].value;\n        return roundToSignificantDigits(viaUsd, 8);\n    }\n    // Try cross conversion via EUR\n    const fromEurKey = createRateKey(from, \"EUR\");\n    const eurToKey = createRateKey(\"EUR\", to);\n    if (rates[fromEurKey] && rates[eurToKey]) {\n        const viaEur = amount * rates[fromEurKey].value * rates[eurToKey].value;\n        return roundToSignificantDigits(viaEur, 8);\n    }\n    // Try cross conversion via COP (for VES-COP specifically)\n    if (from === \"VES\" && to === \"COP\") {\n        const vesUsdKey = createRateKey(\"VES\", \"USD\");\n        const usdCopKey = createRateKey(\"USD\", \"COP\");\n        if (rates[vesUsdKey] && rates[usdCopKey]) {\n            const viaUsd = amount * rates[vesUsdKey].value * rates[usdCopKey].value;\n            return roundToSignificantDigits(viaUsd, 8);\n        }\n    }\n    if (from === \"COP\" && to === \"VES\") {\n        const copUsdKey = createRateKey(\"COP\", \"USD\");\n        const usdVesKey = createRateKey(\"USD\", \"VES\");\n        if (rates[copUsdKey] && rates[usdVesKey]) {\n            const viaUsd = amount * rates[copUsdKey].value * rates[usdVesKey].value;\n            return roundToSignificantDigits(viaUsd, 8);\n        }\n    }\n    // Try multi-hop conversion: VES -> USD -> EUR -> Target\n    if (from === \"VES\" && (to === \"EUR\" || to === \"COP\")) {\n        const vesUsdKey = createRateKey(\"VES\", \"USD\");\n        const usdEurKey = createRateKey(\"USD\", \"EUR\");\n        const eurTargetKey = createRateKey(\"EUR\", to);\n        if (rates[vesUsdKey] && rates[usdEurKey] && rates[eurTargetKey]) {\n            const viaUsdEur = amount * rates[vesUsdKey].value * rates[usdEurKey].value * rates[eurTargetKey].value;\n            return roundToSignificantDigits(viaUsdEur, 8);\n        }\n    }\n    return null;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/rates/compose.ts\n"));

/***/ })

});