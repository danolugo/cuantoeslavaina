"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/rates/providers/colombianPeso.ts":
/*!**************************************************!*\
  !*** ./src/lib/rates/providers/colombianPeso.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getColombianPesoRates: function() { return /* binding */ getColombianPesoRates; }\n/* harmony export */ });\n// Colombian Peso specific sources with working URLs\nconst COP_SOURCES = [\n    {\n        name: \"ExchangeRate.host COP\",\n        url: \"https://api.exchangerate.host/latest?base=USD&symbols=COP\",\n        parseJson: true\n    },\n    {\n        name: \"Fixer.io COP\",\n        url: \"https://api.fixer.io/latest?base=USD&symbols=COP\",\n        parseJson: true\n    },\n    {\n        name: \"CurrencyAPI COP\",\n        url: \"https://api.currencyapi.com/v3/latest?apikey=free&currencies=COP&base_currency=USD\",\n        parseJson: true\n    },\n    {\n        name: \"OpenExchangeRates COP\",\n        url: \"https://openexchangerates.org/api/latest.json?app_id=free&base=USD&symbols=COP\",\n        parseJson: true\n    },\n    {\n        name: \"Banco de la Rep\\xfablica (Colombia)\",\n        url: \"https://www.banrep.gov.co/es/estadisticas/trm\",\n        parseHtml: true\n    }\n];\nasync function fetchWithRetry(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, retries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 3;\n    for(let i = 0; i < retries; i++){\n        try {\n            const response = await fetch(url, {\n                ...options,\n                headers: {\n                    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n                    \"Accept\": \"application/json, text/html, */*\",\n                    \"Accept-Language\": \"en-US,en;q=0.9,es;q=0.8\",\n                    \"Accept-Encoding\": \"gzip, deflate, br\",\n                    \"Cache-Control\": \"no-cache\",\n                    ...options.headers\n                }\n            });\n            if (response.ok) {\n                return response;\n            }\n        } catch (error) {\n            console.warn(\"Attempt \".concat(i + 1, \" failed for \").concat(url, \":\"), error);\n            if (i === retries - 1) throw error;\n            await new Promise((resolve)=>setTimeout(resolve, 1000 * (i + 1)));\n        }\n    }\n    throw new Error(\"All retry attempts failed\");\n}\nfunction parseCOPFromHTML(html, source) {\n    const rates = {};\n    try {\n        // Banco de la RepÃºblica TRM parsing\n        if (source === \"Banco de la Rep\\xfablica (Colombia)\") {\n            // Look for TRM value in various formats\n            const trmPatterns = [\n                /TRM[:\\s]*\\$?\\s*([\\d,]+\\.?\\d*)/i,\n                /Tasa.*Representativa.*Mercado[:\\s]*\\$?\\s*([\\d,]+\\.?\\d*)/i,\n                /USD.*COP[:\\s]*\\$?\\s*([\\d,]+\\.?\\d*)/i,\n                /1\\s*USD[:\\s]*=\\s*\\$?\\s*([\\d,]+\\.?\\d*)/i,\n                /\"valor\":\"([\\d,]+\\.?\\d*)\"/i,\n                /value[\"\\s]*:[\"\\s]*([\\d,]+\\.?\\d*)/i\n            ];\n            for (const pattern of trmPatterns){\n                const match = html.match(pattern);\n                if (match) {\n                    const value = parseFloat(match[1].replace(/,/g, \"\"));\n                    if (value > 0 && value < 10000) {\n                        rates[\"USD-COP\"] = {\n                            base: \"USD\",\n                            quote: \"COP\",\n                            value: value,\n                            provider: source,\n                            at: new Date().toISOString()\n                        };\n                        rates[\"COP-USD\"] = {\n                            base: \"COP\",\n                            quote: \"USD\",\n                            value: 1 / value,\n                            provider: source,\n                            at: new Date().toISOString()\n                        };\n                        break;\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        console.warn(\"Failed to parse \".concat(source, \" HTML:\"), error);\n    }\n    return rates;\n}\nfunction parseCOPFromJSON(data, source) {\n    const rates = {};\n    try {\n        let usdCopRate = null;\n        if (source === \"ExchangeRate.host COP\") {\n            var _data_rates;\n            if ((_data_rates = data.rates) === null || _data_rates === void 0 ? void 0 : _data_rates.COP) usdCopRate = data.rates.COP;\n        } else if (source === \"Fixer.io COP\") {\n            var _data_rates1;\n            if ((_data_rates1 = data.rates) === null || _data_rates1 === void 0 ? void 0 : _data_rates1.COP) usdCopRate = data.rates.COP;\n        } else if (source === \"CurrencyAPI COP\") {\n            var _data_data_COP, _data_data;\n            if ((_data_data = data.data) === null || _data_data === void 0 ? void 0 : (_data_data_COP = _data_data.COP) === null || _data_data_COP === void 0 ? void 0 : _data_data_COP.value) usdCopRate = data.data.COP.value;\n        } else if (source === \"OpenExchangeRates COP\") {\n            var _data_rates2;\n            if ((_data_rates2 = data.rates) === null || _data_rates2 === void 0 ? void 0 : _data_rates2.COP) usdCopRate = data.rates.COP;\n        }\n        if (usdCopRate && usdCopRate > 0) {\n            rates[\"USD-COP\"] = {\n                base: \"USD\",\n                quote: \"COP\",\n                value: usdCopRate,\n                provider: source,\n                at: data.date || new Date().toISOString()\n            };\n            rates[\"COP-USD\"] = {\n                base: \"COP\",\n                quote: \"USD\",\n                value: 1 / usdCopRate,\n                provider: source,\n                at: data.date || new Date().toISOString()\n            };\n        }\n    } catch (error) {\n        console.warn(\"Failed to parse \".concat(source, \" JSON:\"), error);\n    }\n    return rates;\n}\nasync function getColombianPesoRates() {\n    const allRates = [];\n    const errors = [];\n    // Try multiple sources in parallel\n    const sourcePromises = COP_SOURCES.map(async (source)=>{\n        try {\n            const response = await fetchWithRetry(source.url, {\n                next: {\n                    revalidate: 3600\n                }\n            });\n            if (source.parseHtml) {\n                const html = await response.text();\n                const rates = parseCOPFromHTML(html, source.name);\n                return {\n                    source: source.name,\n                    rates: Object.values(rates),\n                    success: Object.keys(rates).length > 0\n                };\n            } else if (source.parseJson) {\n                const data = await response.json();\n                const rates = parseCOPFromJSON(data, source.name);\n                return {\n                    source: source.name,\n                    rates: Object.values(rates),\n                    success: Object.keys(rates).length > 0\n                };\n            }\n            return {\n                source: source.name,\n                rates: [],\n                success: false,\n                error: \"Unknown source type\"\n            };\n        } catch (error) {\n            console.warn(\"\".concat(source.name, \" failed:\"), error);\n            return {\n                source: source.name,\n                rates: [],\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    });\n    const results = await Promise.allSettled(sourcePromises);\n    // Collect all successful rates\n    results.forEach((result)=>{\n        if (result.status === \"fulfilled\" && result.value.success) {\n            allRates.push(...result.value.rates);\n        } else if (result.status === \"rejected\") {\n            var _result_reason;\n            errors.push(((_result_reason = result.reason) === null || _result_reason === void 0 ? void 0 : _result_reason.message) || \"Unknown error\");\n        }\n    });\n    if (allRates.length === 0) {\n        return {\n            rates: {},\n            provider: \"ColombianPeso-Multiple\",\n            success: false,\n            error: \"All COP sources failed: \".concat(errors.join(\", \"))\n        };\n    }\n    // Average rates from multiple sources\n    const averagedRates = {};\n    const usdCopRates = allRates.filter((r)=>r.base === \"USD\" && r.quote === \"COP\");\n    if (usdCopRates.length > 0) {\n        const avgUsdCop = usdCopRates.reduce((sum, r)=>sum + r.value, 0) / usdCopRates.length;\n        averagedRates[\"USD-COP\"] = {\n            base: \"USD\",\n            quote: \"COP\",\n            value: avgUsdCop,\n            provider: \"Average of \".concat(usdCopRates.length, \" COP sources\"),\n            at: new Date().toISOString()\n        };\n        averagedRates[\"COP-USD\"] = {\n            base: \"COP\",\n            quote: \"USD\",\n            value: 1 / avgUsdCop,\n            provider: \"Average of \".concat(usdCopRates.length, \" COP sources\"),\n            at: new Date().toISOString()\n        };\n    }\n    return {\n        rates: averagedRates,\n        provider: \"ColombianPeso-Multiple\",\n        success: true\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/rates/providers/colombianPeso.ts\n"));

/***/ })

});