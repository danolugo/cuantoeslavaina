"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/rates/providers/colombianPeso.ts":
/*!**************************************************!*\
  !*** ./src/lib/rates/providers/colombianPeso.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getColombianPesoRates: function() { return /* binding */ getColombianPesoRates; }\n/* harmony export */ });\n// Simplified Colombian Peso provider with reliable sources\nasync function getColombianPesoRates() {\n    console.log(\"ColombianPeso: Starting COP rate fetch...\");\n    try {\n        // Try ExchangeRate.host first (most reliable free API)\n        const response = await fetch(\"https://api.exchangerate.host/latest?base=USD&symbols=COP\", {\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n                \"Accept\": \"application/json\"\n            },\n            next: {\n                revalidate: 3600\n            }\n        });\n        if (response.ok) {\n            var _data_rates;\n            const data = await response.json();\n            console.log(\"ColombianPeso: ExchangeRate.host response:\", data);\n            if ((_data_rates = data.rates) === null || _data_rates === void 0 ? void 0 : _data_rates.COP) {\n                const usdCopRate = data.rates.COP;\n                const rates = {\n                    \"USD-COP\": {\n                        base: \"USD\",\n                        quote: \"COP\",\n                        value: usdCopRate,\n                        provider: \"ExchangeRate.host\",\n                        at: data.date || new Date().toISOString()\n                    },\n                    \"COP-USD\": {\n                        base: \"COP\",\n                        quote: \"USD\",\n                        value: 1 / usdCopRate,\n                        provider: \"ExchangeRate.host\",\n                        at: data.date || new Date().toISOString()\n                    }\n                };\n                console.log(\"ColombianPeso: Successfully got COP rates:\", rates);\n                return {\n                    rates,\n                    provider: \"ExchangeRate.host\",\n                    success: true\n                };\n            }\n        }\n        console.log(\"ColombianPeso: ExchangeRate.host failed, trying fallback...\");\n        // Fallback: Use a reasonable current rate\n        const fallbackRate = 4200.0 // Approximate USD-COP rate\n        ;\n        const rates = {\n            \"USD-COP\": {\n                base: \"USD\",\n                quote: \"COP\",\n                value: fallbackRate,\n                provider: \"Fallback\",\n                at: new Date().toISOString()\n            },\n            \"COP-USD\": {\n                base: \"COP\",\n                quote: \"USD\",\n                value: 1 / fallbackRate,\n                provider: \"Fallback\",\n                at: new Date().toISOString()\n            }\n        };\n        console.log(\"ColombianPeso: Using fallback rates:\", rates);\n        return {\n            rates,\n            provider: \"Fallback\",\n            success: true\n        };\n    } catch (error) {\n        console.error(\"ColombianPeso: All sources failed:\", error);\n        // Final fallback\n        const fallbackRate = 4200.0;\n        const rates = {\n            \"USD-COP\": {\n                base: \"USD\",\n                quote: \"COP\",\n                value: fallbackRate,\n                provider: \"Emergency-Fallback\",\n                at: new Date().toISOString()\n            },\n            \"COP-USD\": {\n                base: \"COP\",\n                quote: \"USD\",\n                value: 1 / fallbackRate,\n                provider: \"Emergency-Fallback\",\n                at: new Date().toISOString()\n            }\n        };\n        return {\n            rates,\n            provider: \"Emergency-Fallback\",\n            success: true\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvcmF0ZXMvcHJvdmlkZXJzL2NvbG9tYmlhblBlc28udHMiLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDJEQUEyRDtBQUNwRCxlQUFlQTtJQUNwQkMsUUFBUUMsR0FBRyxDQUFDO0lBRVosSUFBSTtRQUNGLHVEQUF1RDtRQUN2RCxNQUFNQyxXQUFXLE1BQU1DLE1BQU0sNkRBQTZEO1lBQ3hGQyxTQUFTO2dCQUNQLGNBQWM7Z0JBQ2QsVUFBVTtZQUNaO1lBQ0FDLE1BQU07Z0JBQUVDLFlBQVk7WUFBSztRQUMzQjtRQUVBLElBQUlKLFNBQVNLLEVBQUUsRUFBRTtnQkFJWEM7WUFISixNQUFNQSxPQUFPLE1BQU1OLFNBQVNPLElBQUk7WUFDaENULFFBQVFDLEdBQUcsQ0FBQyw4Q0FBOENPO1lBRTFELEtBQUlBLGNBQUFBLEtBQUtFLEtBQUssY0FBVkYsa0NBQUFBLFlBQVlHLEdBQUcsRUFBRTtnQkFDbkIsTUFBTUMsYUFBYUosS0FBS0UsS0FBSyxDQUFDQyxHQUFHO2dCQUNqQyxNQUFNRCxRQUE4QjtvQkFDbEMsV0FBVzt3QkFDVEcsTUFBTTt3QkFDTkMsT0FBTzt3QkFDUEMsT0FBT0g7d0JBQ1BJLFVBQVU7d0JBQ1ZDLElBQUlULEtBQUtVLElBQUksSUFBSSxJQUFJQyxPQUFPQyxXQUFXO29CQUN6QztvQkFDQSxXQUFXO3dCQUNUUCxNQUFNO3dCQUNOQyxPQUFPO3dCQUNQQyxPQUFPLElBQUlIO3dCQUNYSSxVQUFVO3dCQUNWQyxJQUFJVCxLQUFLVSxJQUFJLElBQUksSUFBSUMsT0FBT0MsV0FBVztvQkFDekM7Z0JBQ0Y7Z0JBRUFwQixRQUFRQyxHQUFHLENBQUMsOENBQThDUztnQkFDMUQsT0FBTztvQkFDTEE7b0JBQ0FNLFVBQVU7b0JBQ1ZLLFNBQVM7Z0JBQ1g7WUFDRjtRQUNGO1FBRUFyQixRQUFRQyxHQUFHLENBQUM7UUFFWiwwQ0FBMEM7UUFDMUMsTUFBTXFCLGVBQWUsT0FBTywyQkFBMkI7O1FBQ3ZELE1BQU1aLFFBQThCO1lBQ2xDLFdBQVc7Z0JBQ1RHLE1BQU07Z0JBQ05DLE9BQU87Z0JBQ1BDLE9BQU9PO2dCQUNQTixVQUFVO2dCQUNWQyxJQUFJLElBQUlFLE9BQU9DLFdBQVc7WUFDNUI7WUFDQSxXQUFXO2dCQUNUUCxNQUFNO2dCQUNOQyxPQUFPO2dCQUNQQyxPQUFPLElBQUlPO2dCQUNYTixVQUFVO2dCQUNWQyxJQUFJLElBQUlFLE9BQU9DLFdBQVc7WUFDNUI7UUFDRjtRQUVBcEIsUUFBUUMsR0FBRyxDQUFDLHdDQUF3Q1M7UUFDcEQsT0FBTztZQUNMQTtZQUNBTSxVQUFVO1lBQ1ZLLFNBQVM7UUFDWDtJQUVGLEVBQUUsT0FBT0UsT0FBTztRQUNkdkIsUUFBUXVCLEtBQUssQ0FBQyxzQ0FBc0NBO1FBRXBELGlCQUFpQjtRQUNqQixNQUFNRCxlQUFlO1FBQ3JCLE1BQU1aLFFBQThCO1lBQ2xDLFdBQVc7Z0JBQ1RHLE1BQU07Z0JBQ05DLE9BQU87Z0JBQ1BDLE9BQU9PO2dCQUNQTixVQUFVO2dCQUNWQyxJQUFJLElBQUlFLE9BQU9DLFdBQVc7WUFDNUI7WUFDQSxXQUFXO2dCQUNUUCxNQUFNO2dCQUNOQyxPQUFPO2dCQUNQQyxPQUFPLElBQUlPO2dCQUNYTixVQUFVO2dCQUNWQyxJQUFJLElBQUlFLE9BQU9DLFdBQVc7WUFDNUI7UUFDRjtRQUVBLE9BQU87WUFDTFY7WUFDQU0sVUFBVTtZQUNWSyxTQUFTO1FBQ1g7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvcmF0ZXMvcHJvdmlkZXJzL2NvbG9tYmlhblBlc28udHM/MjM1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXRlLCBSYXRlc0J1bmRsZSwgUHJvdmlkZXJSZXN1bHQgfSBmcm9tICcuLi90eXBlcydcclxuXHJcbi8vIFNpbXBsaWZpZWQgQ29sb21iaWFuIFBlc28gcHJvdmlkZXIgd2l0aCByZWxpYWJsZSBzb3VyY2VzXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb2xvbWJpYW5QZXNvUmF0ZXMoKTogUHJvbWlzZTxQcm92aWRlclJlc3VsdD4ge1xyXG4gIGNvbnNvbGUubG9nKCdDb2xvbWJpYW5QZXNvOiBTdGFydGluZyBDT1AgcmF0ZSBmZXRjaC4uLicpXHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIC8vIFRyeSBFeGNoYW5nZVJhdGUuaG9zdCBmaXJzdCAobW9zdCByZWxpYWJsZSBmcmVlIEFQSSlcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLmV4Y2hhbmdlcmF0ZS5ob3N0L2xhdGVzdD9iYXNlPVVTRCZzeW1ib2xzPUNPUCcsIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNicsXHJcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9LFxyXG4gICAgICBuZXh0OiB7IHJldmFsaWRhdGU6IDM2MDAgfVxyXG4gICAgfSlcclxuICAgIFxyXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgY29uc29sZS5sb2coJ0NvbG9tYmlhblBlc286IEV4Y2hhbmdlUmF0ZS5ob3N0IHJlc3BvbnNlOicsIGRhdGEpXHJcbiAgICAgIFxyXG4gICAgICBpZiAoZGF0YS5yYXRlcz8uQ09QKSB7XHJcbiAgICAgICAgY29uc3QgdXNkQ29wUmF0ZSA9IGRhdGEucmF0ZXMuQ09QXHJcbiAgICAgICAgY29uc3QgcmF0ZXM6IFBhcnRpYWw8UmF0ZXNCdW5kbGU+ID0ge1xyXG4gICAgICAgICAgJ1VTRC1DT1AnOiB7XHJcbiAgICAgICAgICAgIGJhc2U6ICdVU0QnLFxyXG4gICAgICAgICAgICBxdW90ZTogJ0NPUCcsXHJcbiAgICAgICAgICAgIHZhbHVlOiB1c2RDb3BSYXRlLFxyXG4gICAgICAgICAgICBwcm92aWRlcjogJ0V4Y2hhbmdlUmF0ZS5ob3N0JyxcclxuICAgICAgICAgICAgYXQ6IGRhdGEuZGF0ZSB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAnQ09QLVVTRCc6IHtcclxuICAgICAgICAgICAgYmFzZTogJ0NPUCcsXHJcbiAgICAgICAgICAgIHF1b3RlOiAnVVNEJyxcclxuICAgICAgICAgICAgdmFsdWU6IDEgLyB1c2RDb3BSYXRlLFxyXG4gICAgICAgICAgICBwcm92aWRlcjogJ0V4Y2hhbmdlUmF0ZS5ob3N0JyxcclxuICAgICAgICAgICAgYXQ6IGRhdGEuZGF0ZSB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0NvbG9tYmlhblBlc286IFN1Y2Nlc3NmdWxseSBnb3QgQ09QIHJhdGVzOicsIHJhdGVzKVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICByYXRlcyxcclxuICAgICAgICAgIHByb3ZpZGVyOiAnRXhjaGFuZ2VSYXRlLmhvc3QnLFxyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygnQ29sb21iaWFuUGVzbzogRXhjaGFuZ2VSYXRlLmhvc3QgZmFpbGVkLCB0cnlpbmcgZmFsbGJhY2suLi4nKVxyXG4gICAgXHJcbiAgICAvLyBGYWxsYmFjazogVXNlIGEgcmVhc29uYWJsZSBjdXJyZW50IHJhdGVcclxuICAgIGNvbnN0IGZhbGxiYWNrUmF0ZSA9IDQyMDAuMCAvLyBBcHByb3hpbWF0ZSBVU0QtQ09QIHJhdGVcclxuICAgIGNvbnN0IHJhdGVzOiBQYXJ0aWFsPFJhdGVzQnVuZGxlPiA9IHtcclxuICAgICAgJ1VTRC1DT1AnOiB7XHJcbiAgICAgICAgYmFzZTogJ1VTRCcsXHJcbiAgICAgICAgcXVvdGU6ICdDT1AnLFxyXG4gICAgICAgIHZhbHVlOiBmYWxsYmFja1JhdGUsXHJcbiAgICAgICAgcHJvdmlkZXI6ICdGYWxsYmFjaycsXHJcbiAgICAgICAgYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICB9LFxyXG4gICAgICAnQ09QLVVTRCc6IHtcclxuICAgICAgICBiYXNlOiAnQ09QJyxcclxuICAgICAgICBxdW90ZTogJ1VTRCcsXHJcbiAgICAgICAgdmFsdWU6IDEgLyBmYWxsYmFja1JhdGUsXHJcbiAgICAgICAgcHJvdmlkZXI6ICdGYWxsYmFjaycsXHJcbiAgICAgICAgYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdDb2xvbWJpYW5QZXNvOiBVc2luZyBmYWxsYmFjayByYXRlczonLCByYXRlcylcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJhdGVzLFxyXG4gICAgICBwcm92aWRlcjogJ0ZhbGxiYWNrJyxcclxuICAgICAgc3VjY2VzczogdHJ1ZVxyXG4gICAgfVxyXG4gICAgXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0NvbG9tYmlhblBlc286IEFsbCBzb3VyY2VzIGZhaWxlZDonLCBlcnJvcilcclxuICAgIFxyXG4gICAgLy8gRmluYWwgZmFsbGJhY2tcclxuICAgIGNvbnN0IGZhbGxiYWNrUmF0ZSA9IDQyMDAuMFxyXG4gICAgY29uc3QgcmF0ZXM6IFBhcnRpYWw8UmF0ZXNCdW5kbGU+ID0ge1xyXG4gICAgICAnVVNELUNPUCc6IHtcclxuICAgICAgICBiYXNlOiAnVVNEJyxcclxuICAgICAgICBxdW90ZTogJ0NPUCcsXHJcbiAgICAgICAgdmFsdWU6IGZhbGxiYWNrUmF0ZSxcclxuICAgICAgICBwcm92aWRlcjogJ0VtZXJnZW5jeS1GYWxsYmFjaycsXHJcbiAgICAgICAgYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICB9LFxyXG4gICAgICAnQ09QLVVTRCc6IHtcclxuICAgICAgICBiYXNlOiAnQ09QJyxcclxuICAgICAgICBxdW90ZTogJ1VTRCcsXHJcbiAgICAgICAgdmFsdWU6IDEgLyBmYWxsYmFja1JhdGUsXHJcbiAgICAgICAgcHJvdmlkZXI6ICdFbWVyZ2VuY3ktRmFsbGJhY2snLFxyXG4gICAgICAgIGF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByYXRlcyxcclxuICAgICAgcHJvdmlkZXI6ICdFbWVyZ2VuY3ktRmFsbGJhY2snLFxyXG4gICAgICBzdWNjZXNzOiB0cnVlXHJcbiAgICB9XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbImdldENvbG9tYmlhblBlc29SYXRlcyIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIm5leHQiLCJyZXZhbGlkYXRlIiwib2siLCJkYXRhIiwianNvbiIsInJhdGVzIiwiQ09QIiwidXNkQ29wUmF0ZSIsImJhc2UiLCJxdW90ZSIsInZhbHVlIiwicHJvdmlkZXIiLCJhdCIsImRhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzdWNjZXNzIiwiZmFsbGJhY2tSYXRlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/rates/providers/colombianPeso.ts\n"));

/***/ })

});